/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.push.notification.server;

/**
 *
 * @author shivam
 */

import com.notnoop.apns.APNS;
import com.notnoop.apns.ApnsService;
import com.notnoop.apns.ApnsServiceBuilder;
import com.notnoop.apns.internal.ApnsConnection;
import com.notnoop.exceptions.InvalidSSLConfig;
import com.notnoop.exceptions.NetworkIOException;
import com.notnoop.exceptions.RuntimeIOException;
import java.util.*;
//import com.shivam.dao;
import com.shivam.dao.DAO;
import java.io.File;
import java.net.InetSocketAddress;
public class SendNotifications {
     ApnsService service;
     public static void main(String[] args)
 {
   try
   {
     SendNotifications object = new SendNotifications();
//     object.notify("Notify my iPhone");
   }
   catch(Exception e)
   {
      System.out.println("Exception occured :"+e.getMessage());
   }
 }


      public SendNotifications()
    { 
	try{
//	shivamdesvelopmentnotification
//	shivampushdistribution
	    String path="/home/shivam/softwares/apache-tomcat-7.0.35/webapps/p12certificates/shivamdesvelopmentnotification.p12";
	      if (!new File(path).exists()) {
                                  path = "";
                                    }
     service =
             APNS.newService()
            .withCert(path,"shivam123")
//	     .withProductionDestination()
            .withSandboxDestination()
		     
	    .build();
	        String payload = APNS.newPayload().
	     alertBody("message1".toString()).build();
     String token = "8bbf0b6effe0d6bf143a722edb6e6942c66dfd9bb9a46341971ce9fd9aac9548";
           service.push(token, payload);
	 
  
	}catch(RuntimeIOException ex){
	 ex.printStackTrace();
	}catch(Exception ex){
	 ex.printStackTrace();
	}
    }

 
// void notify(String message1)
//{
//      
//     String payload = APNS.newPayload().
//	     alertBody(message1.toString()).build();
//     String token = "8bbf0b6effe0d6bf143a722edb6e6942c66dfd9bb9a46341971ce9fd9aac9548";
//           service.push(token, payload);
//   Map<String, Date> inactiveDevices =   service.getInactiveDevices();
////     for (String deviceToken : inactiveDevices.keySet()) 
////     {
////        Date inactiveAsOf = inactiveDevices.get(deviceToken);
////        System.out.println("Inactive device token : "+deviceToken);
////        System.out.println("Tried to send notification at :"    +inactiveAsOf);
////     }
// 
// }

}
